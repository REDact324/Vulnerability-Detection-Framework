import argparse
import sys
import os
import io
from transformers import pipeline
from transformers import AutoModelForImageClassification, AutoFeatureExtractor
import torch
from src.screenshots import provide_results
from src.variables import label2id, print_text

## TODO: Add arguments and adjust variables
def get_args_parser():
  parser = argparse.ArgumentParser()
  parser.add_argument('--use_local', help='load model from local',
                    action="store_true")
  parser.add_argument('--output_dir', help='output text file directory')
  parser.add_argument('input_ads', help='input_ads the IP address or a text file')

  return parser

##########################

def main(args):
  if args.output_dir:
    out_path = args.output_dir

  input_ads = args.input_ads
  is_file = os.path.exists(input_ads)

  if args.use_local:
    model_address = './model/'
  else:
    model_address = 'REDact123/Vulnerabilty_ConvNeXt_384'

  device = torch.device('cuda' if torch.cuda.is_available() else 'mps' if torch.mps.is_available() else 'cpu')

  original_stdout = sys.stdout

  sys.stdout = io.StringIO()

  feature_extractor = AutoFeatureExtractor.from_pretrained(model_address)
  model = AutoModelForImageClassification.from_pretrained(model_address)
  model.to(device)

  sys.stdout = original_stdout

  pipe = pipeline('image-classification', model=model, feature_extractor=feature_extractor, device=device)

  images = provide_results(input_ads, is_file)

  for screen, ip_address, port in images:
    result = pipe(screen)
    predicted_label = result[0]['label']
    id = label2id[predicted_label]
    text = print_text[id]
    print(f"{ip_address}:{port}, " + text)

    if id != 3 and args.output_dir:
       with open(out_path, "w") as out_file:
        out_file.write(ip_address + ':' + str(port))


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Vulnerability check based on ConvNeXt', parents=[get_args_parser()])
    args = parser.parse_args()

    main(args)
