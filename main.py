import sys
import os
import io
from transformers import pipeline
from transformers import AutoModelForImageClassification, AutoFeatureExtractor
import torch
from src.screenshots import provide_results

## TODO: Add arguments and adjust variables
file_path = 'dir/to/output'
input_path = 'dir/to/input'
is_file = os.path.exists(input_path)

device = torch.device('cuda' if torch.cuda.is_available() else 'mps' if torch.mps.is_available() else 'cpu')

feature_extractor = AutoFeatureExtractor.from_pretrained('REDact123/Vulnerabilty_ConvNeXt_384')
model = AutoModelForImageClassification.from_pretrained('REDact123/Vulnerabilty_ConvNeXt_384')

original_stdout = sys.stdout

sys.stdout = io.StringIO()
model.to(device)

sys.stdout = original_stdout

labels = [
    'admin_need_update',
    'admin_no_need_update',
    'not_admin_need_update',
    'not_admin_no_need_update']

label2id = {v:k for k, v in enumerate(labels)}

print_text = [
    'High Vulnerability: Deactivate admin account and update system!',
    'Medium Vulnerability: Deactivate admin account!',
    'Medium Vulnerability: Update system!',
    'Low Vulnerability: Everything looks fine for now! :)'
]

pipe = pipeline('image-classification', model=model, feature_extractor=feature_extractor, device=device)

images = provide_results(input_path, is_file)

with open(file_path, "w") as out_file:
  for screen, ip_address, port in images:
    result = pipe(screen)
    predicted_label = result[0]['label']
    id = label2id[predicted_label]
    text = print_text[id]
    print(f"{ip_address}:{port}, " + text)

    if id != 3:
      out_file.write(ip_address + ':' + str(port))
